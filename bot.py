
import os
import datetime
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ü–∏–∫–ª–∞
CYCLE_START = datetime.date(2025, 5, 26)

def get_cycle_phase():
    today = datetime.date.today()
    days_since = (today - CYCLE_START).days % 28
    if days_since < 5:
        return "–ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è üåßÔ∏è"
    elif days_since < 14:
        return "–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞ üå±"
    elif days_since < 17:
        return "–û–≤—É–ª—è—Ü–∏—è üå∏"
    else:
        return "–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞ üåô"

# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üìã –£—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"))
main_kb.add(KeyboardButton("üåô –í–µ—á–µ—Ä–Ω–∏–µ –∏—Ç–æ–≥–∏"))
main_kb.add(KeyboardButton("üß† –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"))
main_kb.add(KeyboardButton("üìÜ –§–∞–∑–∞ —Ü–∏–∫–ª–∞"))

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
mood_kb = ReplyKeyboardMarkup(resize_keyboard=True)
mood_kb.add("üòä –•–æ—Ä–æ—à–æ", "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üò£ –ü–ª–æ—Ö–æ")
mood_kb.add("üîÅ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")

user_mood_log = {}

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –º—è–≥–∫–∏–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ üå∏\n"
                         "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.
"
                         "–í—ã–±–∏—Ä–∞–π, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º:", reply_markup=main_kb)

@dp.message_handler(Text(equals="üìã –£—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"))
async def morning(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ ‚òÄÔ∏è\n\n–°–µ–≥–æ–¥–Ω—è —Ç—ã –º–æ–∂–µ—à—å:
"
                         "‚Äì –°–¥–µ–ª–∞—Ç—å –≥–ª–æ—Ç–æ–∫ –≤–æ–¥—ã
"
                         "‚Äì –ü–æ—Ç—è–Ω—É—Ç—å—Å—è –≤ –ø–æ—Å—Ç–µ–ª–∏
"
                         "‚Äì –ü–æ–∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å –≤–∫—É—Å–Ω–æ –∏ –±–µ–∑ —Å–ø–µ—à–∫–∏

"
                         "–¢—ã —É–∂–µ –º–æ–ª–æ–¥–µ—Ü –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ –ø—Ä–æ—Å–Ω—É–ª–∞—Å—å üíó")

@dp.message_handler(Text(equals="üåô –í–µ—á–µ—Ä–Ω–∏–µ –∏—Ç–æ–≥–∏"))
async def evening(message: types.Message):
    await message.answer("–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä üåô\n\n–í—Å–ø–æ–º–Ω–∏, —á—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ –±—ã–ª–æ —Å–µ–≥–æ–¥–Ω—è.
"
                         "–ï—Å–ª–∏ –¥–µ–Ω—å –±—ã–ª —Ç—è–∂—ë–ª—ã–π ‚Äî —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ —Å –Ω–∏–º —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å üí´\n"
                         "–ü—É—Å—Ç—å —Å–æ–Ω –±—É–¥–µ—Ç —Å–ø–æ–∫–æ–π–Ω—ã–º. –¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –æ—Ç–¥—ã—Ö–∞ üõèÔ∏è")

@dp.message_handler(Text(equals="üìÜ –§–∞–∑–∞ —Ü–∏–∫–ª–∞"))
async def cycle_phase(message: types.Message):
    phase = get_cycle_phase()
    await message.answer(f"–°–µ–π—á–∞—Å —É —Ç–µ–±—è: {phase}
"
                         "–ë—É–¥—å –æ—Å–æ–±–µ–Ω–Ω–æ –±–µ—Ä–µ–∂–Ω–∞ –∫ —Å–µ–±–µ üå∑")

@dp.message_handler(Text(equals="üß† –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"))
async def mood_request(message: types.Message):
    await message.answer("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–π—á–∞—Å?", reply_markup=mood_kb)

@dp.message_handler(Text(startswith="üòä"))
@dp.message_handler(Text(startswith="üòê"))
@dp.message_handler(Text(startswith="üò£"))
async def log_mood(message: types.Message):
    user_id = message.from_user.id
    mood = message.text
    date = datetime.date.today().isoformat()
    user_mood_log.setdefault(user_id, {})[date] = mood
    await message.answer("–Ø –∑–∞–ø–∏—Å–∞–ª–∞ —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üíñ", reply_markup=main_kb)

@dp.message_handler(Text(equals="üîÅ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
async def back_to_menu(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é üåÄ", reply_markup=main_kb)

if __name__ == '__main__':
    executor.start_polling(dp)
